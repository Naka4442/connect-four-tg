class ConnectFour:
    ROWS = 6
    COLS = 7
    EMPTY_CELL = "‚¨ú"
    PLAYER_TOKENS = {1: "üçî", 2: "üåØ"}

    def __init__(self):
        self.board = [[self.EMPTY_CELL for _ in range(self.COLS)] for _ in range(self.ROWS)]
        self.current_player = 1

    def drop_disc(self, column: int) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —É—Ä–æ–Ω–∏—Ç—å –¥–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
        if column < 0 or column >= self.COLS or self.board[0][column] != self.EMPTY_CELL:
            return False  # –ù–µ–ª—å–∑—è —Å—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
        
        for row in reversed(range(self.ROWS)):
            if self.board[row][column] == self.EMPTY_CELL:
                self.board[row][column] = self.PLAYER_TOKENS[self.current_player]
                if self.check_winner(row, column):
                    return True  # –ü–æ–±–µ–¥–∞
                self.current_player = 3 - self.current_player  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ (1 -> 2, 2 -> 1)
                return True
        
        return False

    def check_winner(self, row: int, col: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞."""
        token = self.board[row][col]
        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, 2 –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        
        for dr, dc in directions:
            count = 1
            for sign in (-1, 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                r, c = row + dr * sign, col + dc * sign
                while 0 <= r < self.ROWS and 0 <= c < self.COLS and self.board[r][c] == token:
                    count += 1
                    if count >= 4:
                        return True
                    r += dr * sign
                    c += dc * sign
        return False
    
    def is_full(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ø–æ–ª–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é."""
        return all(self.board[0][col] != self.EMPTY_CELL for col in range(self.COLS))

    def render_board(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        board_str = "\n".join(" ".join(row) for row in self.board)
        board_str += "\n" + "".join([str(col).center(3) for col in range(1, self.COLS + 1)])
        return board_str

if __name__ == "__main__":
    game = ConnectFour()
    for j in range(6):
        for i in range(7):
            game.drop_disc(i)
    print(game.render_board())